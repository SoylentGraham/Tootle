//
//  Mac.xcconfig
//  
//	cross configuration, Mac-specific build flags
//
#include "../Tootle.xcconfig"


//	gr: add the mac target define
MAC_DEFINITIONS = $(TOOTLE_DEFINITIONS) TL_TARGET_MAC


//	gr: not sure what this is for, but it was defined in some projects (under user settings, so not a regular build option...)
ZERO_LINK = NO

//	gr: speed up
GCC_UNROLL_LOOPS = YES
GCC_FAST_MATH = YES

//	gr: many of the lib's targets had this setting... but not everything. I presume it was explicitly set, but not sure.
DEBUG_INFORMATION_FORMAT = dwarf-with-dsym

//	gr: small bools to match win32
GCC_ONE_BYTE_BOOL = YES

//	gr: some better warnings
GCC_WARN_INHIBIT_ALL_WARNINGS = NO
GCC_TREAT_WARNINGS_AS_ERRORS = NO				//	turn this on one day :)

//	gr: turn these on asap
GCC_WARN_SHADOW = NO							//	warn if a local variable has the same name as a global or another local or a func (risk of ambiguity)
GCC_WARN_EFFECTIVE_CPLUSPLUS_VIOLATIONS = NO	//	good-practise warnings (eg. = operator 
GCC_WARN_SIGN_COMPARE = NO
GCC_WARN_ABOUT_MISSING_PROTOTYPES = NO			//	maybe a bit OTT to turn this on...
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = NO			//	covered by EFFECTIVE_CPLUSPLUS_VIOLATIONS I think... (this is compilers guess at virtual classes though, so may need to turn this off if it's giving out spurious warnings)
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = NO			//	overloaded function doesn't have "virtual" in front of it
GCC_WARN_CHECK_SWITCH_STATEMENTS = NO

GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_UNKNOWN_PRAGMAS = YES
GCC_WARN_UNUSED_VARIABLE = YES
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES
GCC_WARN_64_TO_32_BIT_CONVERSION = YES			//	warn if casting down to 32 bit (in case we make refs 64bit and end up losing data)
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES	//	multi-dimensional-array/union initialiser warning (don't think we ever do this though)
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES	//	bad struct initialisation.
GCC_WARN_ABOUT_POINTER_SIGNEDNESS = YES			//	not sure how you'd cause this... (signed vs unsigned pointers...)
GCC_WARN_PROTOTYPE_CONVERSION = YES				//	catch unexpected type conversions - turn off if this warns about custom conversions too much. we DON'T want to cast classes in code
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES		//	enabled, but phase out ... functions in favour of iostream << style operators
CC_WARN_UNUSED_VALUE = YES						//	catch when we do a calculation, but nothing with the result


//	gr: don't define these, we can leave them as xcode wants
//MACH_O_TYPE = staticlib

//	gr: make all symbols visible
GCC_INLINES_ARE_PRIVATE_EXTERN = NO
GCC_SYMBOLS_PRIVATE_EXTERN = NO

//	common mac compiler setup
ADDITIONAL_SDKS = 
ARCHS = $(ARCHS_STANDARD_32_64_BIT)
SDKROOT = 
ONLY_ACTIVE_ARCH = YES
VALID_ARCHS = i386 ppc ppc64 ppc7400 ppc970 x86_64
SYMROOT = build
OBJROOT = $(SYMROOT)
CONFIGURATION_BUILD_DIR = $(BUILD_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)
CONFIGURATION_TEMP_DIR = $(PROJECT_TEMP_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)
SHARED_PRECOMPS_DIR = $(CACHE_ROOT)/SharedPrecompiledHeaders
BUILD_VARIANTS = normal
ENABLE_OPENMP_SUPPORT = NO
GENERATE_PROFILING_CODE = 
PRECOMPS_INCLUDE_HEADERS_FROM_BUILT_PRODUCTS_DIR = YES
SCAN_ALL_SOURCE_FILES_FOR_INCLUDES = NO
CODE_SIGN_IDENTITY = 
CODE_SIGN_RESOURCE_RULES_PATH = 
OTHER_CODE_SIGN_FLAGS = 
GCC_VERSION = 4.2
STRIPFLAGS = 
ALTERNATE_GROUP = $(INSTALL_GROUP)
ALTERNATE_OWNER = $(INSTALL_OWNER)
ALTERNATE_MODE = $(INSTALL_MODE_FLAG)
ALTERNATE_PERMISSIONS_FILES = 
DEPLOYMENT_LOCATION = NO
DEPLOYMENT_POSTPROCESSING = NO
MACOSX_DEPLOYMENT_TARGET = $(inherited)
INSTALL_GROUP = $(GROUP)
INSTALL_OWNER = $(USER)
INSTALL_MODE_FLAG = u+w,go-w,a+rX
DSTROOT = /tmp/$(PROJECT_NAME).dst
STRIP_INSTALLED_PRODUCT = YES
STRIP_STYLE = all
SEPARATE_STRIP = NO
MODULE_NAME = 
MODULE_START = 
MODULE_STOP = 
MODULE_VERSION = 
BUNDLE_LOADER = 
STANDARD_C_PLUS_PLUS_LIBRARY_TYPE = dynamic
DYLIB_COMPATIBILITY_VERSION = 
DYLIB_CURRENT_VERSION = 
DEAD_CODE_STRIPPING = YES
LINKER_DISPLAYS_MANGLED_NAMES = NO
PRESERVE_DEAD_CODE_INITS_AND_TERMS = NO
LD_DYLIB_INSTALL_NAME = 
EXPORTED_SYMBOLS_FILE = 
INIT_ROUTINE = 
LINK_WITH_STANDARD_LIBRARIES = YES
LD_OPENMP_FLAGS = -fopenmp
ORDER_FILE = 
LD_MAP_FILE_PATH = $(TARGET_TEMP_DIR)/$(PRODUCT_NAME)-LinkMap-$(CURRENT_VARIANT)-$(CURRENT_ARCH).txt
GENERATE_MASTER_OBJECT_FILE = NO
PRELINK_LIBS = 
KEEP_PRIVATE_EXTERNS = NO
LD_RUNPATH_SEARCH_PATHS = 
SEPARATE_SYMBOL_EDIT = NO
PRELINK_FLAGS = 
SECTORDER_FLAGS = 
UNEXPORTED_SYMBOLS_FILE = 
WARNING_LDFLAGS = 
LD_GENERATE_MAP_FILE = NO
APPLY_RULES_IN_COPY_FILES = NO
INFOPLIST_EXPAND_BUILD_SETTINGS = YES
FRAMEWORK_VERSION = A
INFOPLIST_FILE = 
INFOPLIST_OTHER_PREPROCESSOR_FLAGS = 
INFOPLIST_OUTPUT_FORMAT = same-as-input
INFOPLIST_PREPROCESSOR_DEFINITIONS = 
INFOPLIST_PREFIX_HEADER = 
INFOPLIST_PREPROCESS = NO
COPYING_PRESERVES_HFS_DATA = NO
PRIVATE_HEADERS_FOLDER_PATH = 
PLIST_FILE_OUTPUT_FORMAT = same-as-input
PUBLIC_HEADERS_FOLDER_PATH = 
STRINGS_FILE_OUTPUT_ENCODING = UTF-16
ALWAYS_SEARCH_USER_PATHS = YES
FRAMEWORK_SEARCH_PATHS = 
LIBRARY_SEARCH_PATHS = 
REZ_SEARCH_PATHS = 
EXCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES = *.nib *.lproj *.framework *.gch *.xcode* (*) CVS .svn
INCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES = 
USER_HEADER_SEARCH_PATHS = 
OTHER_TEST_FLAGS = 
TEST_HOST = 
TEST_RIG = 
CURRENT_PROJECT_VERSION = 
VERSION_INFO_FILE = 
VERSION_INFO_EXPORT_DECL = 
VERSION_INFO_PREFIX = 
VERSION_INFO_SUFFIX = 
VERSIONING_SYSTEM = 
VERSION_INFO_BUILDER = 
GCC_FAST_OBJC_DISPATCH = YES
GCC_AUTO_VECTORIZATION = NO
GCC_OBJC_CALL_CXX_CDTORS = NO
GCC_ENABLE_SSE3_EXTENSIONS = NO
GCC_ENABLE_SUPPLEMENTAL_SSE3_INSTRUCTIONS = NO
GCC_STRICT_ALIASING = NO
GCC_FEEDBACK_DIRECTED_OPTIMIZATION = Off
GCC_ENABLE_FIX_AND_CONTINUE = NO
GCC_GENERATE_DEBUGGING_SYMBOLS = YES
GCC_GENERATE_TEST_COVERAGE_FILES = NO
GCC_MODEL_TUNING = G4
GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = NO
GCC_ENABLE_KERNEL_DEVELOPMENT = NO
GCC_DEBUGGING_SYMBOLS = default
LLVM_LTO = NO
GCC_REUSE_STRINGS = YES
GCC_NO_COMMON_BLOCKS = NO
GCC_ENABLE_OBJC_GC = unsupported
GCC_ENABLE_SYMBOL_SEPARATION = YES
GCC_THREADSAFE_STATICS = YES
GCC_MODEL_PPC64 = NO
GCC_CHAR_IS_UNSIGNED_CHAR = NO
GCC_ENABLE_ASM_KEYWORD = YES
GCC_PFE_FILE_C_DIALECTS = c objective-c c++ objective-c++
GCC_C_LANGUAGE_STANDARD = compiler-default
GCC_CHECK_RETURN_VALUE_OF_OPERATOR_NEW = NO
GCC_CW_ASM_SYNTAX = YES
GCC_INPUT_FILETYPE = automatic
GCC_ALTIVEC_EXTENSIONS = NO
GCC_ENABLE_CPP_EXCEPTIONS = YES
GCC_ENABLE_CPP_RTTI = YES
GCC_LINK_WITH_DYNAMIC_LIBRARIES = YES
GCC_ENABLE_OBJC_EXCEPTIONS = YES
GCC_ENABLE_TRIGRAPHS = NO
GCC_ENABLE_FLOATING_POINT_LIBRARY_CALLS = NO
GCC_USE_INDIRECT_FUNCTION_CALLS = NO
GCC_USE_REGISTER_FUNCTION_CALLS = NO
GCC_INCREASE_PRECOMPILED_HEADER_SHARING = NO
GCC_PRECOMPILE_PREFIX_HEADER = NO
GCC_PREFIX_HEADER = 
GCC_ENABLE_BUILTIN_FUNCTIONS = YES
GCC_ENABLE_PASCAL_STRINGS = YES
GCC_FORCE_CPU_SUBTYPE_ALL = NO
GCC_SHORT_ENUMS = NO
GCC_USE_GCC3_PFE_SUPPORT = YES
GCC_USE_STANDARD_INCLUDE_SEARCHING = YES
GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS = 



